
public class QueenProblem {
	
	int N = 4;
	
	boolean solveNQ()
	{
		int queen[][] = { {0,0,0,0},
		    			  {0,0,0,0},
		    			  {0,0,0,0},
		    		  	  {0,0,0,0}
						};
		
		if(solveNQUtil(queen, 0) == false)
			return false;
		
		printSol(queen);
		return true;
	}
	
	boolean solveNQUtil(int[][] queen, int col)
	{
		if(col >= N)
			return true;
		
		for(int i = 0; i < N; i++)
		{
			if(isSafe(queen, i, col))
			{
				queen[i][col] = 1;
				
				if(solveNQUtil(queen, col + 1))
					return true;
				
				queen[i][col] = 0;
			}	
		}
		
		return false;
	}
	
	boolean isSafe(int[][] queen, int row, int col)
	{
		int i, j;
		
		//Check this row
		for(i = 0; i < col; i++)
			if(queen[row][i] == 1)
				return false;
		
		//Check upper diagonal
		for(i = row, j = col; i >= 0 && j >= 0; i--, j--)
			if(queen[i][j] == 1)
				return false;
		
		
		//Check lower diagonal
		for(i = row, j = col; i < N && j >= 0; i++, j-- )
			if(queen[i][j] == 1)
				return false;
		
		return true;
	}
	
	void printSol(int board[][])
    {
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
                System.out.print(" " + board[i][j]
                                 + " ");
            System.out.println();
        }
    }
	
	
	public static void main(String args[])
    {
        QueenProblem Queen = new QueenProblem();
        Queen.solveNQ();
    }

}
